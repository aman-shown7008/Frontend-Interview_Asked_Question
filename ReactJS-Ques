1. What is ReactJS?
A. ReactJS is a JavaScript library for building user interfaces and allows developers to the creation of simple, fast, and scalable web applications.
Ex - Component-Based Architecture:
•  React organizes UI into reusable components, allowing developers to break down complex UIs into smaller, manageable pieces.
•  Components can be easily reused across the application, enhancing maintainability and scalability.
•  Header Component: Contains the logo, navigation links, and maybe user profile info.
•  Sidebar Component: Displays relevant shortcuts or additional navigation.
•  Main Content Component: Shows the main content of the page.
•  Footer Component: Includes copyright info, links, etc.



Q. How to create a React App?
A. npx create-react-app first-proj
   NPX is package runner & its getting download when we download node.js.



Q. Advantage & Features of ReactJS?
A. Advantages:
•  Virtual DOM: React uses a virtual DOM for faster updates and improved performance.
•  Reusable Components: Components are modular and reusable, promoting code reusability and maintainability.
•  Declarative: React follows a declarative programming paradigm, making it easier to understand and debug code.
•  Efficient Rendering: React efficiently updates and renders only the necessary components when data changes, reducing unnecessary DOM manipulation.
•  JSX: React uses JSX, a syntax extension that allows writing HTML within JavaScript, enhancing component readability and development speed.

   Features:
•  Component-based Architecture: React follows a component-based architecture, where UIs are built using reusable components.
•  Unidirectional Data Flow: Data flows in one direction, from parent to child components, ensuring predictable and easier-to-understand data management.
•  Lifecycle Methods: React provides lifecycle methods that allow developers to perform actions at specific stages of a component's lifecycle.
•  State Management: React allows for stateful components, where state can be managed and updated to reflect changes in data.
•  Ecosystem: React has a vast ecosystem of tools and libraries (e.g., Redux, React Router) that enhance its capabilities for building complex applications.



Q. What is difference b/w DOM and Virtual DOM?-[ Use of this in Real life ].
A. DOM - [ Documrnt Object Model ]
   Document - HTML Document
   Object - Elements like - h1, p , head
   Model - Compelete Document

   DOM - The Document Object Model (DOM) is like a tree-like structure that represents a web page in a way that computers can understand. 
         It's used by web browsers to understand and manipulate the content, structure, and style of web pages. In simple terms, it's the programming interface that allows developers to interact with and change elements on a web page using code.
         (e.g., elements, attributes, text).

   Virtual DOM - It's a lightweight copy of the actual DOM maintained by the framework. When changes are made to the data in the application, the Virtual DOM is updated instead of directly manipulating the actual DOM. 
                 Then, a process called reconciliation is used to efficiently update only the parts of the actual DOM that have changed, resulting in improved performance.

   For Ex - In real life, the Virtual DOM allows developers to create dynamic web applications with better performance by minimizing direct manipulation of the actual DOM, which can be slow and resource-intensive.
            This approach leads to smoother user experiences, especially in complex web applications with frequent updates and interactions.



Q. What is difference b/w Class Components and Functional Components?
A. 



2. Difference betweeb DOM and Virtual DOM?
A. React uses a virtual representation of the DOM, which allows it to efficiently update only the necessary parts of the actual DOM when data changes.
   This minimizes re-rendering, boosts performance, and results in faster updates for the user interface.



Declarative Syntax:
The declarative nature of React simplifies the process of creating UIs by specifying what the UI should look like based on the application state, rather than how to change the DOM.

2. What is JSX?
A. JSX stands for JavaScript XML. It allows us to write HTML inside JavaScript and place them in the DOM without using functions like appendChild( ) or createElement( ).
Ex- const element = document.createElement('h1');
    element.textContent = 'Hello, JSX!';
    document.getElementById('root').appendChild(element);



----REACT-HOOKS----[ With USES ]
1. UseState Hooks -
A. By useState lets you add state to functional components in React, enabling them to manage and update their own data.
   If we want to play with our UI & Want some data to get store somewhere so then we can use UseState hook.

USE- It's commonly used for storing and updating data that affects the component's rendering or behavior, such as input values, toggling UI elements, or tracking user interactions.
EX- https://codesandbox.io/p/sandbox/basic-practise-rd9g58?file=%2Fsrc%2FuseState.jsx%3A29%2C16


2. UseEffect Hooks -
A. UseEffect is a built-in React hook used in functional components for handling side effects in React applications. 
   When our component is going to be Render first time OR If there is some update in our component. Then useEffect is going to be called.
   When we use useEffect then we are requesting react to execute function every time when our componenets render.
   Its close replacement of a componentDidMount, componentDidUpdate and componentWillUnmount.

USE - It is used for Data Fetching, DOM Manipulation, Managing Timers, Event Listeners.
Ex- https://codesandbox.io/p/sandbox/basic-practise-rd9g58?file=%2Fsrc%2FUseEffect%2FUseEffect.jsx%3A1%2C8-1%2C20


3. UseMemo Hooks - 
A. The useMemo hook helps to optimize performance by remembering or caching the result of a function so that it doesn't recompute the result unless the state change. This can be particularly useful when dealing with expensive calculations or complex data processing in your React components, as it helps prevent unnecessary recalculations and renders.

USE - Sometimes we are changing some states of component and at the same time some unwanted function are also called & we do not want them to be run at that time we can use UseMemo. Because if that function is very and we unwanted calling him again and again so there will be performance issue OR it will take so much time to reload a component. 
Ex - https://codesandbox.io/p/sandbox/basic-practise-rd9g58?file=%2Fsrc%2FUseMemo%2FUseMemo.jsx%3A14%2C5


4. UseContext Hooks - 
A. The useContext hook allows a functional component to access data from a parent component and share it with deeply nested child components without the need to pass data through each intermediate component.

USE - The useContext hook in React has resolved the problem of prop drilling, which occurs when you need to pass data through multiple layers of components in order to reach a deeply nested component that requires access to that data.
      By using useContext, you can access shared data or state directly in any component without the need to pass it down through intermediate components, thus simplifying the component hierarchy and making the codebase cleaner and more maintainable.

Ex - https://codesandbox.io/p/sandbox/basic-practise-rd9g58?file=%2Fsrc%2FUseContext%2FUseContext.jsx%3A11%2C17


5. 
A. 

USE - 

Ex - 







