1. What is ReactJS?
A. ReactJS is a JavaScript library for building user interfaces and allows developers to the creation of simple, fast, and scalable web applications.
Ex - Component-Based Architecture:
•  React organizes UI into reusable components, allowing developers to break down complex UIs into smaller, manageable pieces.
•  Components can be easily reused across the application, enhancing maintainability and scalability.
•  Header Component: Contains the logo, navigation links, and maybe user profile info.
•  Sidebar Component: Displays relevant shortcuts or additional navigation.
•  Main Content Component: Shows the main content of the page.
•  Footer Component: Includes copyright info, links, etc.



Q. How to create a React App?
A. npx create-react-app first-proj
   NPX is package runner & its getting download when we download node.js.



Q. Advantage & Features of ReactJS?
A. Advantages:
•  Virtual DOM: React uses a virtual DOM for faster updates and improved performance.
•  Reusable Components: Components are modular and reusable, promoting code reusability and maintainability.
•  Declarative: React follows a declarative programming paradigm, making it easier to understand and debug code.
•  Efficient Rendering: React efficiently updates and renders only the necessary components when data changes, reducing unnecessary DOM manipulation.
•  JSX: React uses JSX, a syntax extension that allows writing HTML within JavaScript, enhancing component readability and development speed.

   Features:
•  Component-based Architecture: React follows a component-based architecture, where UIs are built using reusable components.
•  Unidirectional Data Flow: Data flows in one direction, from parent to child components, ensuring predictable and easier-to-understand data management.
•  Lifecycle Methods: React provides lifecycle methods that allow developers to perform actions at specific stages of a component's lifecycle.
•  State Management: React allows for stateful components, where state can be managed and updated to reflect changes in data.
•  Ecosystem: React has a vast ecosystem of tools and libraries (e.g., Redux, React Router) that enhance its capabilities for building complex applications.



Q. What is difference b/w DOM and Virtual DOM?-[ Use of this in Real life ].
A. DOM - [ Documrnt Object Model ]
   Document - HTML Document
   Object - Elements like - h1, p , head
   Model - Compelete Document



Q. What is difference b/w Class Components and Functional Components?
A. 



2. Difference betweeb DOM and Virtual DOM?
A. React uses a virtual representation of the DOM, which allows it to efficiently update only the necessary parts of the actual DOM when data changes.
   This minimizes re-rendering, boosts performance, and results in faster updates for the user interface.



Declarative Syntax:
The declarative nature of React simplifies the process of creating UIs by specifying what the UI should look like based on the application state, rather than how to change the DOM.

2. What is JSX?
A. JSX stands for JavaScript XML. It allows us to write HTML inside JavaScript and place them in the DOM without using functions like appendChild( ) or createElement( ).
Ex- const element = document.createElement('h1');
    element.textContent = 'Hello, JSX!';
    document.getElementById('root').appendChild(element);



----REACT-HOOKS----
1. UseState Hooks -
A. The useState hook in React is a fundamental tool for adding stateful behavior to functional components, simplifying component logic, and promoting cleaner 
   and more maintainable code. If we want to play with our UI & Want some data to get store somewhere so then we can use UseState hook.
EX- https://codesandbox.io/p/sandbox/basic-practise-rd9g58?file=%2Fsrc%2FuseState.jsx%3A29%2C16


2. UseEffect Hooks -
A. When our component is going to be Render first time OR If there is some update in our component. Then useEffect is going to be called.
   When we use useEffect then we are requesting react to execute function every time when our componenets render.
   Its close replacement of a componentDidMount, componentDidUpdate and componentWillUnmount.











