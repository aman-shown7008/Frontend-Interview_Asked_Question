1.  D/f b/w Package.JSON & Package-lock.JSON? Use-Case.
A.  Feature	                       package.json	                                                 package-lock.json
    Purpose                        Manages project metadata and dependencies.	                 Locks the exact versions of dependencies
    Contains	                   Dependency names & version ranges (e.g., ^ or ~).	         Exact versions of dependencies & sub-dependencies
    Versioning	                   Allows flexibility (^1.2.3 installs 1.x.x).    	             Ensures exact versions (1.2.3 remains 1.2.3)
    Human-readable?	               Yes, meant to be edited manually.	                         Not meant to be manually edited
    Generated?	                   Created manually when initializing a project (npm init).	     Auto-generated by npm when dependencies are installed
    Used By?	                   Developers to define dependencies.	                         npm to ensure reproducible installs

    Use-Case.
    Package.json
    🔹If we want to change version of any dependency OR want to delete that dependency so we can after running npm i.
    🔹Allows flexibility in dependency versions for future updates.

    Package-lock.json
    🔹Ensures consistency by locking dependency versions, preventing unexpected updates.
    🔹package-lock.json is for making sure the versions don’t change unexpectedly.



2.  D/f b/w Axios and Fetch? Use-Case.
A.  Axios → A third-party library to make HTTP requests easily. It has built-in features like automatic JSON parsing, error handling, and request cancellation.
    Fetch → A built-in JavaScript function for making HTTP requests. It's lightweight but requires extra steps for handling errors and responses.
    🔹 Think of Axios as a ready-to-eat meal 🍽️, while Fetch is raw ingredients 🍅🥩—you need to cook it yourself!
    🔹Axios automatically parses JSON, while Fetch needs response.json().
    🔹Axios catches HTTP errors automatically, but Fetch needs a manual check (if (!response.ok)).
    🔹Axios has a cleaner syntax with fewer steps.






































