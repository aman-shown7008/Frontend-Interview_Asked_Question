Basics-
üîπ To Install - npm install -g typescript
üîπ Check Version - tsc -v



1.  What is TypeScript & Use-case?
A.  TypeScript adds extra rules to JavaScript that help your code work better with your code editor. It helps find mistakes before you even run the code.
    TypeScript code converts to JavaScript, which runs anywhere JavaScript runs: In a browser, on Node.js, Deno, Bun and in your apps.

    Use-Case:
üîπ Type Safety ‚Äì Prevents bugs by enforcing types.
üîπ Better Code Suggestions (Autocompletion) ‚Äì Helps with better IntelliSense in VS Code.
üîπ Improved Readability & Maintainability ‚Äì Code is easier to understand in teams.
üîπ Works with React, Node.js, and other JS frameworks ‚Äì No extra effort needed.
   



2.  Difference between JavaScript and TypeScript?
A.  Feature	                                       JavaScript (JS)                                                                            	  TypeScript (TS)
    Definition-	                   A dynamic, loosely-typed scripting language used for web development.	                     A superset of JavaScript that adds static typing for better code quality.
    Typing-                        Dynamically typed (no type checking).	                                                     Statically typed (checks types at compile time).
    Compilation-         	       No compilation needed, directly runs in browsers.	                                         Needs to be compiled (tsc converts .ts to .js).
    Error Detection-	           Errors are found at runtime.	                                                                 Errors are found at compile time, preventing bugs early.
    OOP Support-	               Supports OOP but lacks built-in interfaces and strong typing.	                             Supports interfaces, generics, and advanced OOP concepts.
    Browser Support-	           Directly supported by browsers.	                                                             Needs to be transpiled to JavaScript before running in browsers.
    Code Readability-	           Less structured due to lack of types.	                                                     More structured with types, making large projects easier to manage.
    Community Support-	           Huge community, widely used.	                                                                 Growing fast, preferred in large projects.



3.  What are the Core Data types in TS? With Use-Case.
A.  1Ô∏è‚É£Number - Represents all numeric values, including integers and floating-point numbers.
    Ex - let age: number = 10;
         let binary: number = 0b1010;
    üîπUse Case: Used for calculations, counters, prices, etc.

    2Ô∏è‚É£String - Represents text values.
    Ex - let fName: string = "Aman";
         let greeting: string = `Hello {fName}!`;
    üîπUse Case: Used for storing and manipulating text.

    3Ô∏è‚É£Boolean - Represents true or false values.
    Ex - let isLogged: boolean = true;
         let hasPermision: boolean = false;
    üîπUse Case: Used for conditions, toggles, and authentication logic.

    4Ô∏è‚É£Array - Represents a collection of elements of a specific type.
    Ex - let numbers: number[] = [1, 2, 3, 4, 5];
        let names: Array<string> = ["Alice", "Bob", "Charlie"];
   üîπUse Case: Used for storing lists, collections, and iterations.

    5Ô∏è‚É£Tuple - Represents a fixed-length array with different types.
    Ex - let person: [string, number] = ["Alice", 30];
    üîπUse Case: Used for structured data like database records.

    6Ô∏è‚É£Enum - Represents a set of named constants.
    Ex - enum Color { Red, Green, Blue } 
         let myColor: Color = Color.Green;
   üîπUse Case: Used for defining a set of related constants like status codes or modes.

    7Ô∏è‚É£Any - Allows any type of value, disabling type checking.
    Ex - let data : any = "Hello";
         data = 42;
    üîπUse Case: Used when migrating JavaScript code or handling dynamic values.

    8Ô∏è‚É£Unknown - Similar to any, but type checking is enforced before usage.
    Ex - let userInput: unknown;
         userInput = "Hello";
         userInput = 42;

         if(typeof userInput === "String"){
            console.log(userInput.toUpperCase());
         }
    üîπUse Case: Used for safe dynamic values where the type is initially unknown.

    9Ô∏è‚É£Void - Used for functions that do not return a value.
    Ex - function logMess(): void{
           console.log("Logging...");
         }
    üîπUse Case: Used for functions that perform side effects like logging.

    üîüNull & Undefined - Represents absence of value.
    Ex - let nothing: null = null;
         let notAssigned: undefined = undefined;
    üîπUse Case: Used when a value is explicitly missing.

    1Ô∏è‚É£1Ô∏è‚É£Never - Represents functions that never return or always throw an error.
    Ex - function throwError(message: string): never {
            throw new Error(message);
         }
    üîπUse Case: Used for error handling and infinite loops.

   

4.  What is Type Inference in TS? Use-cases.
A.  TypeScript automatically infers (determines) the type of a variable based on its value, without explicitly specifying the type.
    Ex- let age = 25;  // TypeScript infers `age` as `number`
        let name = "Alice";  // TypeScript infers `string`
        let isActive = true;  // TypeScript infers `boolean`
    Use-case: Automatically assigns types to object properties.



Q.  How to declare Object, Array, Tuple in TS?
A.  Objects - In TypeScript, an object type defines the structure of an object, specifying the properties and their key types.
    Ex - type objType={name: string, age: number, location: string};
         const user1:objType = {
           name: "Aman Mishra",
           age: 22, 
           location: "lucknow"
         }

         const user2:objType = {
           name: "Ankit bhaiya",
           age: 24, 
           location: "MP"
         }
         console.warn(user1.name+" "+user1.age);
         console.warn(user2.name+" "+user2.age);
    Use-case: Objects are useful when handling structured data with multiple properties.

    Arrays - In TypeScript, arrays can store multiple values of a specific type.
    Ex - let arr:string[] = ["Aman", "Hello", "Boy"];
         let arr1: any[] = ["Aman", 12, true];
         let arr2: [number, string] = [23, "Aman"];
         console.log(arr);
         console.log(arr1);
    Use-case - Arrays are useful when storing multiple values of the same type.

    Tuple - A Tuple in TypeScript is a fixed-length array where each element has a specific type. It allows storing multiple values of different types in a single variable.
    Ex - let tuple:[string, boolean, number?] = ["Hello", true];
         console.log(tuple);
    Use-case -  Helps return multiple values with strict type safety.














