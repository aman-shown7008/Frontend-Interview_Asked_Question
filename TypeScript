Basics-
🔹 To Install - npm install -g typescript
🔹 Check Version - tsc -v
🔹 Compile Multiple file into JS - tsc -watch
🔹 Generate TS config file - tsc -init


    
1.  What is TypeScript & Use-case?
A.  TypeScript adds extra rules to JavaScript that help your code work better with your code editor. It helps find mistakes before you even run the code.
    TypeScript code converts to JavaScript, which runs anywhere JavaScript runs: In a browser, on Node.js, Deno, Bun and in your apps.

    Use-Case:
🔹 Type Safety – Prevents bugs by enforcing types.
🔹 Better Code Suggestions (Autocompletion) – Helps with better IntelliSense in VS Code.
🔹 Improved Readability & Maintainability – Code is easier to understand in teams.
🔹 Works with React, Node.js, and other JS frameworks – No extra effort needed.
   



2.  Difference between JavaScript and TypeScript?
A.  Feature	                                       JavaScript (JS)                                                                            	  TypeScript (TS)
    Definition-	                   A dynamic, loosely-typed scripting language used for web development.	                     A superset of JavaScript that adds static typing for better code quality.
    Typing-                        Dynamically typed (no type checking).	                                                     Statically typed (checks types at compile time).
    Compilation-         	       No compilation needed, directly runs in browsers.	                                         Needs to be compiled (tsc converts .ts to .js).
    Error Detection-	           Errors are found at runtime.	                                                                 Errors are found at compile time, preventing bugs early.
    OOP Support-	               Supports OOP but lacks built-in interfaces and strong typing.	                             Supports interfaces, generics, and advanced OOP concepts.
    Browser Support-	           Directly supported by browsers.	                                                             Needs to be transpiled to JavaScript before running in browsers.
    Code Readability-	           Less structured due to lack of types.	                                                     More structured with types, making large projects easier to manage.
    Community Support-	           Huge community, widely used.	                                                                 Growing fast, preferred in large projects.



3.  What are the Core Data types in TS? With Use-Case.
A.  1️⃣Number - Represents all numeric values, including integers and floating-point numbers.
    Ex - let age: number = 10;
         let binary: number = 0b1010;
    🔹Use Case: Used for calculations, counters, prices, etc.

    2️⃣String - Represents text values.
    Ex - let fName: string = "Aman";
         let greeting: string = `Hello {fName}!`;
    🔹Use Case: Used for storing and manipulating text.

    3️⃣Boolean - Represents true or false values.
    Ex - let isLogged: boolean = true;
         let hasPermision: boolean = false;
    🔹Use Case: Used for conditions, toggles, and authentication logic.

    4️⃣Array - Represents a collection of elements of a specific type.
    Ex - let numbers: number[] = [1, 2, 3, 4, 5];
         let names: Array<string> = ["Alice", "Bob", "Charlie"];
   🔹Use Case: Used for storing lists, collections, and iterations.

    5️⃣Tuple - Represents a fixed-length array with different types.
    Ex - let person: [string, number] = ["Alice", 30];
    🔹Use Case: Used for structured data like database records.

    6️⃣Enum - It basically assign no to your string & make comparison easy.
    Ex - enum Role{ ADMIN, USER, DEALER, BOT }
         console.warn(Role);
   🔹Use Case: Used for defining a set of related constants[no] attached with string like status codes or modes.

    7️⃣Any - Allows any type of value, disabling type checking.
    Ex - let data : any = "Hello";
         data = 42;
    🔹Use Case: Used when we did not know what type of data is going to be stored in this.

    8️⃣Unknown - Similar to any, but type checking is enforced before usage.
    Ex - let userInput: unknown;
         userInput = "Hello";
         userInput = 42;

         if(typeof userInput === "String"){
            console.log(userInput.toUpperCase());
         }
    🔹Use Case: Used for safe dynamic values where the type is initially unknown.

    9️⃣Void - Used for functions that do not return a value.
    Ex - function logMess(): void{
           console.log("Logging...");
         }
    🔹Use Case: Used for functions that perform side effects like logging.

    🔟Null & Undefined - Represents absence of value.
    Ex - let nothing: null = null;
         let notAssigned: undefined = undefined;
    🔹Use Case: Used when a value is explicitly missing.

    1️⃣1️⃣Never - Represents functions that never return or always throw an error.
    Ex - function throwError(message: string): never {
            throw new Error(message);
         }
    🔹Use Case: Used for error handling and infinite loops.

   

4.  What is Type Inference in TS? Use-cases.
A.  TypeScript automatically infers (determines) the type of a variable based on its value, without explicitly specifying the type.
    Ex- let age = 25;  // TypeScript infers `age` as `number`
        let name = "Alice";  // TypeScript infers `string`
        let isActive = true;  // TypeScript infers `boolean`
    🔹Use-case: Automatically assigns types to object properties.



5.  How to declare Object, Array, Tuple, Union, Literals, Type_alias, Function_type, unknown_type, never_type in TS?
A.  Objects - In TypeScript, an object type defines the structure of an object, specifying the properties and their key types.
    Ex - type objType={name: string, age: number, location: string};
         const user1:objType = {
           name: "Aman Mishra",
           age: 22, 
           location: "lucknow"
         }

         const user2:objType = {
           name: "Ankit bhaiya",
           age: 24, 
           location: "MP"
         }
         console.warn(user1.name+" "+user1.age);
         console.warn(user2.name+" "+user2.age);
    🔹Use-case: Objects are useful when handling structured data with multiple properties.

    Arrays - In TypeScript, arrays can store multiple values of a specific type.
    Ex - let arr:string[] = ["Aman", "Hello", "Boy"];
         let arr1: any[] = ["Aman", 12, true];
         let arr2: [number, string] = [23, "Aman"];
         console.log(arr);
         console.log(arr1);
    🔹Use-case - Arrays are useful when storing multiple values of the same type.

    Tuple - A Tuple in TypeScript is a fixed-length array where each element has a specific type. It allows storing multiple values of different types in a single variable.
    Ex - let tuple:[string, boolean, number?] = ["Hello", true];
         console.log(tuple);
    🔹Use-case -  Helps return multiple values with strict type safety.

    Union - In TypeScript, a union type allows a variable to hold values of multiple specified types. It is represented using the | (pipe) operator.
    Ex - function first(fi: number | string, si: number | string | boolean){
            if(typeof(fi) === 'number' && typeof(si) === 'number'){
              return fi + si;
            }else{
              return fi + " "+ si;
         }}
          console.log(first(10, 10));
    🔹Use-Case = When a value can have multiple types & for type safety. 

    Literals - In TypeScript, literal types allow you to specify exact values a variable can have instead of general types like string or number.
    Ex - type status = "Success" | "Error" | "Loading";
         function showStatus(Status: status){
           console.log(`Status: ${Status}`);
         }
         showStatus("Success");
    🔹Use-Case - You're building a frontend application that fetches data from an API. The API response can have three possible states:
    "Loading" → Data is being fetched.
    "Success" → Data fetched successfully.
    "Error" → Something went wrong.
    Using literal types, we can ensure the function only accepts valid statuses.

    Type_alias - With Type Alias, you define a type once and reuse it for multiple variables. This avoids repetitive type declarations and makes code more readable and maintainable.
    Ex - type varType = string | number | null;
         function alias(num1 : varType, num2 : varType, num3 : varType){
           console.log(num1+" "+num2+" "+num3);
         }
         console.log(alias("Hi Boy!", 97, null));
    🔹Use-Case - Instead of writing the same type multiple times, we define it once and reuse it.

    Function_type - A Function Type in TypeScript defines the structure (parameters & return type) of a function. It ensures type safety and consistency.
    Ex - type MathOpertion = (a: number | undefined, b: number | undefined) => number | undefined;
         const add: MathOpertion = (a, b) => (a != undefined && b != undefined ? a + b : undefined);
         function sub(a: number, b : number):number{
           return b - a;
         }
         console.log(add(5, 6));
         console.log(sub(2, 6));
    🔹Use-Case - Function types are useful in many scenarios where we need consistent, reusable, and type-safe functions.

    Unknown_type - The unknown type in TypeScript is a type-safe counterpart to any. It represents any value, but unlike any, it does not allow operations on a variable of type unknown without first performing type checking or type assertions.
    Ex - let data:unknown;
         data = 23;
         data = true;
         let num:boolean;
         if(typeof data === 'boolean'){
           num = data;
           console.log(num);
         }
         console.log(data);
    🔹Use-Case - When handling user inputs or API responses where the type is not predetermined.

    Never_type - Never is a TypeScript type that represents values that never occur. It is used for functions that never return (like those that always throw an error or run indefinitely) and for unreachable code."
    Ex - function apiError(msg, sCode){
           throw {Message: msg, Status_Code: sCode}
         }
         console.log(apiError("Serve Side Error", 500));
    🔹Use-Case - Use never when a function never completes execution (throws an error or runs forever).



6.  Difference b/w Never & Void? 
A.  Feature	                               never	                                                              void
    Meaning-	          Represents a function that never returns.	                          Represents a function that returns but has no value.
    Use Case-	          Used for functions that throw an error or run forever.	          Used for functions that return undefined or don't return anything.
    Example-              A function that always throws an error or an infinite loop.	      A function that executes a task but doesn't return a value.












