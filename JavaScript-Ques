Q. What is JavaScript and why we use it? 
A. JavaScript is a Synchronous single-threaded language everything in JavaScript happens inside a Excution Context.
•  Single threaded means- JavaScript can execute once command at a time.
•  Synchronous single-threaded means- JavaScript can execute one command at a time in a specific order.
   Uses-
   JavaScript is used for adding interactivity and dynamic behavior to web pages. It enables developers to create engaging user experiences by responding to user actions in real-time.



Q. How JavaScript Code is executed?
A. When JavaScript code is executed, Execution Context is created and it is called Global Execution Context.
2. JavaScript program is executed in TWO PHASES inside Execution Context - 
  a. MEMORY ALLOCATION PHASE - JavaScript program goes throughout the program and allocate memory of Variables and Functions declared in program.
  b. CODE EXECUTION PHASE -  JavaScript program now goes throughout the code line by line and execute the code. 
3. A Function is invoked when it is called and it acts as another MINI PROGRAM and creates its own Execution Context.
4. Returns keyword return the Control back to the PREVIOUS Execution-Context where the Function is called and Execution Context of the Function is DELETED.
5. CALL STACK maintains the ORDER of execution of Execution Contexts. It CREATES Execution Context whenever a Program starts or a Function is invoked and it pops out the Execution Context when a Function or Program ENDS.



Q. What is Hoisting? Use of it.
A. Mechanism in JS where the variable declarations are moved to the top of the scope before execution. Therefore it is possible to call a function before initializing it.
•  Function Declarations: Hoisting allows you to use a function before it's declared in the code. This is particularly useful when you define functions at the bottom of your script but want to use them at the top.
•  Variable Declarations: Similarly, hoisting allows you to reference variables before they are declared. However, only the declarations are hoisted, not the initializations. This means the variable exists but is undefined until it's assigned a value.




